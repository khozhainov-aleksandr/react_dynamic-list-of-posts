{"version":3,"sources":["api/api.ts","api/posts.ts","api/users.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getPosts","a","fetch","response","json","getUserPosts","userId","getPostDetails","postId","getUsers","PostsList","posts","selectedPostId","onSelectPostId","className","map","post","title","id","type","onClick","style","backgroundColor","getPostComments","deleteComment","commentId","method","addComment","comment","headers","body","JSON","stringify","NewCommentForm","onRequest","useState","name","setName","email","setEmail","setBody","handleSubmit","event","preventDefault","newComment","onSubmit","placeholder","value","onChange","target","required","PostDetails","setPost","comments","setComments","showComments","setShowComments","requestPost","postFromServer","console","error","requestComments","commentsFromServer","useEffect","length","classnames","hidden","App","users","setUsers","setPosts","setSelectedPostId","requestUsers","usersFromServer","slice","requestPosts","postsFromServer","handleSelect","Number","userPost","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e4fd4237.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getPosts = async () => {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n};\n\nexport const getUserPosts = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n};\n","import { BASE_URL } from './api';\n\nexport const getUsers = async () => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n};\n","import React from 'react';\nimport { Post } from '../../react-app-env';\n\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[];\n  onSelectPostId: (postId: number) => void;\n  selectedPostId: number;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId,\n  onSelectPostId,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li key={post.id} className=\"PostsList__item\">\n          <div>\n            <b>\n              {`[User #${post.userId}]:`}\n            </b>\n            {post.title}\n          </div>\n\n          {post.id !== selectedPostId\n            ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  onSelectPostId(post.id);\n                }}\n              >\n                Open\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  onSelectPostId(0);\n                }}\n                style={{ backgroundColor: 'red' }}\n              >\n                Close\n              </button>\n            )}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n","import { NewComment } from '../react-app-env';\nimport { BASE_URL } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n};\n\nexport const deleteComment = async (commentId: number) => {\n  await fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const addComment = async (comment: NewComment) => {\n  await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: { 'Content-type': 'application/json; charset=UTF-8' },\n    body: JSON.stringify(comment),\n  });\n};\n","import React, { useState } from 'react';\nimport { Post } from '../../react-app-env';\nimport { addComment } from '../../api/comments';\n\nimport './NewCommentForm.scss';\n\ntype Props = {\n  post: Post;\n  onRequest: () => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  post,\n  onRequest,\n}) => {\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [body, setBody] = useState<string>('');\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const newComment = {\n      postId: post.id,\n      name,\n      email,\n      body,\n    };\n\n    await addComment(newComment);\n    onRequest();\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => {\n            setBody(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport classnames from 'classnames';\n\nimport { Post, Comment } from '../../react-app-env';\nimport { getPostDetails } from '../../api/posts';\nimport { deleteComment, getPostComments } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\n\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [showComments, setShowComments] = useState<boolean>(true);\n\n  const requestPost = async () => {\n    try {\n      const postFromServer = await getPostDetails(selectedPostId);\n\n      setPost(postFromServer);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error(error);\n    }\n  };\n\n  const requestComments = async () => {\n    try {\n      const commentsFromServer = await getPostComments(selectedPostId);\n\n      setComments(commentsFromServer);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    requestPost();\n    requestComments();\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length === 0 && 'No comments'}\n        <div className={\n          classnames(\n            {\n              hidden: comments.length === 0,\n            },\n          )\n        }\n        >\n          {!showComments\n            ? (\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  setShowComments(true);\n                }}\n              >\n                {`Show ${comments.length} comments`}\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => {\n                  setShowComments(false);\n                }}\n              >\n                {`Hide ${comments.length} comments`}\n              </button>\n            )}\n        </div>\n\n        {showComments && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={async () => {\n                    await deleteComment(comment.id);\n                    await requestComments();\n                  }}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          {post && (\n            <NewCommentForm\n              post={post}\n              onRequest={requestComments}\n            />\n\n          )}\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { User, Post } from './react-app-env';\nimport { getPosts, getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport './styles/general.scss';\nimport './App.scss';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n\n  const requestUsers = async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer.slice(0, 10));\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error(error);\n    }\n  };\n\n  const requestPosts = async () => {\n    try {\n      const postsFromServer = await getPosts();\n\n      setPosts(postsFromServer);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    requestUsers();\n    requestPosts();\n  }, []);\n\n  const handleSelectedPostId = (postId: number) => {\n    setSelectedPostId(postId);\n  };\n\n  const handleSelect = async (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const userPost = await getUserPosts(Number(event.target.value));\n\n    setPosts(userPost);\n\n    if (+event.target.value === 0) {\n      requestPosts();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          {'Select a user: '}\n\n          <select\n            className=\"App__user-selector\"\n            onChange={handleSelect}\n          >\n            <option value={selectedPostId}>\n              All users\n            </option>\n\n            {users.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            onSelectPostId={handleSelectedPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0 && (\n            <PostDetails selectedPostId={selectedPostId} />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}